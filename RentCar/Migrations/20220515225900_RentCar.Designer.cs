// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RentCar.Models;

#nullable disable

namespace RentCar.Migrations
{
    [DbContext(typeof(RentCarDBcontext))]
    [Migration("20220515225900_RentCar")]
    partial class RentCar
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("RentCar.Models.Brand", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.ToTable("brands");
                });

            modelBuilder.Entity("RentCar.Models.Client", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("PersonKind")
                        .HasColumnType("bit");

                    b.Property<double>("creditLimit")
                        .HasColumnType("float");

                    b.Property<int>("identificationCard")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.Property<int>("tarjetaCrNumber")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("clients");
                });

            modelBuilder.Entity("RentCar.Models.Employee", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("CommissionPercentage")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("datedateOfAdmission")
                        .HasColumnType("datetime2");

                    b.Property<int>("identificationCard")
                        .HasColumnType("int");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.Property<string>("workingTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("RentCar.Models.Fuel_Type", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("fuel_Types");
                });

            modelBuilder.Entity("RentCar.Models.Inspection", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("amountOfFuel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("clientid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("employeeid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("glassBreaked")
                        .HasColumnType("bit");

                    b.Property<bool>("jack")
                        .HasColumnType("bit");

                    b.Property<bool>("replacementTire")
                        .HasColumnType("bit");

                    b.Property<bool>("scratch")
                        .HasColumnType("bit");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.Property<Guid>("vehiculeid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("clientid");

                    b.HasIndex("employeeid");

                    b.HasIndex("vehiculeid");

                    b.ToTable("inspections");
                });

            modelBuilder.Entity("RentCar.Models.RentAndReturn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Employeeid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Vehiculeid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("clientid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("costPerDay")
                        .HasColumnType("float");

                    b.Property<DateTime>("rentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("rentDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("returnDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Employeeid");

                    b.HasIndex("Vehiculeid");

                    b.HasIndex("clientid");

                    b.ToTable("rentAndReturns");
                });

            modelBuilder.Entity("RentCar.Models.Vehicule", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("brandid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("chasisNumber")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("fuel_typeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("modelid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("motorNumber")
                        .HasColumnType("int");

                    b.Property<int>("plateNumber")
                        .HasColumnType("int");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.Property<Guid>("vehicule_Typeid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("brandid");

                    b.HasIndex("fuel_typeId");

                    b.HasIndex("modelid");

                    b.HasIndex("vehicule_Typeid");

                    b.ToTable("Vehicule");
                });

            modelBuilder.Entity("RentCar.Models.Vehicule_Type", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.ToTable("vehicule_Types");
                });

            modelBuilder.Entity("RentCar.Models.VehiculeModel", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("brandid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.HasIndex("brandid");

                    b.ToTable("vehiculemodels");
                });

            modelBuilder.Entity("RentCar.Models.Inspection", b =>
                {
                    b.HasOne("RentCar.Models.Client", "client")
                        .WithMany()
                        .HasForeignKey("clientid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentCar.Models.Employee", "employee")
                        .WithMany()
                        .HasForeignKey("employeeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentCar.Models.Vehicule", "vehicule")
                        .WithMany()
                        .HasForeignKey("vehiculeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("client");

                    b.Navigation("employee");

                    b.Navigation("vehicule");
                });

            modelBuilder.Entity("RentCar.Models.RentAndReturn", b =>
                {
                    b.HasOne("RentCar.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("Employeeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentCar.Models.Vehicule", "Vehicule")
                        .WithMany()
                        .HasForeignKey("Vehiculeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentCar.Models.Client", "client")
                        .WithMany()
                        .HasForeignKey("clientid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Vehicule");

                    b.Navigation("client");
                });

            modelBuilder.Entity("RentCar.Models.Vehicule", b =>
                {
                    b.HasOne("RentCar.Models.Brand", "brand")
                        .WithMany()
                        .HasForeignKey("brandid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentCar.Models.Fuel_Type", "fuel_type")
                        .WithMany()
                        .HasForeignKey("fuel_typeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentCar.Models.VehiculeModel", "model")
                        .WithMany()
                        .HasForeignKey("modelid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentCar.Models.Vehicule_Type", "vehicule_Type")
                        .WithMany()
                        .HasForeignKey("vehicule_Typeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("brand");

                    b.Navigation("fuel_type");

                    b.Navigation("model");

                    b.Navigation("vehicule_Type");
                });

            modelBuilder.Entity("RentCar.Models.VehiculeModel", b =>
                {
                    b.HasOne("RentCar.Models.Brand", "brand")
                        .WithMany()
                        .HasForeignKey("brandid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("brand");
                });
#pragma warning restore 612, 618
        }
    }
}
